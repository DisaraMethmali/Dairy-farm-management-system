import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useLocation } from 'react-router-dom';
import jspdf from 'jspdf';
import 'jspdf-autotable';
import companyLogo from '../../assets/sidebar-logo.png';
import { IconButton, Button, CircularProgress,Box,Typography } from '@mui/material';
import DownloadIcon from '@mui/icons-material/Download';
import GrazingSideBar from '../../components/Grazing/GrazingSideBar';
import Name from '../../components/Grazing/Name';
import GrazingDate from '../../components/Grazing/GrazingDate';

const Report = () => {
  const location = useLocation();
  const path = location.pathname.split('/')[1];
  const [sessionDataList, setSessionDataList] = useState([]);
  const [pastureDataList, setPastureDataList] = useState([]);
  const [effluentDataList, setEffluentDataList] = useState([]);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    fetchSessionData();
    fetchPastureData();
    fetchEffluentData();
  }, []);

  const fetchSessionData = async () => {
    try {
      const response = await axios.get(`http://localhost:3000/api/sessions`);
      setSessionDataList(response.data);
    } catch (error) {
      console.error('Error fetching session data:', error);
      alert('Error fetching session data. Please try again later.');
    }
  };

  const fetchPastureData = async () => {
    try {
      const response = await axios.get(`http://localhost:3000/api/pastureDetails`);
      setPastureDataList(response.data);
    } catch (error) {
      console.error('Error fetching pasture data:', error);
      alert('Error fetching pasture data. Please try again later.');
    }
  };

  const fetchEffluentData = async () => {
    try {
      const response = await axios.get(`http://localhost:3000/api/effluentRoutes`);
      setEffluentDataList(response.data);
    } catch (error) {
      console.error('Error fetching effluent data:', error);
      alert('Error fetching effluent data. Please try again later.');
    }
  };

  function generateSessionPDF(data) {
    const doc = new jspdf();
    const tableRows = [];
    const headers = [
      'Date',
      'Time',
      'Type of Session',
      'Grazing Area',
      'Cow Batch',
      'Assigned Employee',
      'Grazing Duration',
      'Onsite Feeding Duration',
    ];

    data.forEach((item, index) => {
      const rowData = [
        new Date(item.date).toLocaleDateString(),
        item.time,
        item.typeOfSession,
        item.grazingArea,
        item.cowBatch,
        item.assignedEmployee,
        item.grazingDuration,
        item.onsiteFeedingDuration,
      ];
      tableRows.push(rowData);
    });

    const date = new Date().toLocaleDateString('en-US', {
      day: 'numeric',
      month: 'short',
      year: 'numeric',
    });

    const margin = 14;
    const logoWidth = 30;
    const logoHeight = 20;
    const maxWidth = 290;
    const textLines = doc.splitTextToSize(
      `report related to grazing`,
      maxWidth
    );
    const textParagraph = textLines.join('\n');

    doc.addImage(
      companyLogo,
      'PNG',
      doc.internal.pageSize.width - margin - logoWidth,
      margin,
      logoWidth,
      logoHeight
    );

    doc.setFontSize(10).setFont('helvetica').text('Nevil Nutri Feeds', margin, margin + 10);
    doc.text(' no:241 ,Radawana', margin, margin + 15);
    doc.text('Gampaha', margin, margin + 20);
    doc.text('Srilanka', margin, margin + 25);

    doc.setFontSize(10).text(`Date: ${date}`, margin, margin + 35);

    doc.setFontSize(20).setTextColor(56, 119, 91).setFont('helvetica', 'bold').text('Session Details Report', margin, 70);

    doc.setFontSize(10).setFont('helvetica', 'normal').setTextColor(0, 0, 0).text(
      textParagraph,
      margin,
      80,
      { maxWidth: maxWidth }
    );

    doc.autoTable(headers, tableRows, {
      styles: { fontSize: 10 },
      startY: 100,
      headerStyles: { fillColor: [31, 41, 55] },
    });

    doc.setFontSize(10).setTextColor(200, 200, 200).text(`Report generated by Grazing management system- Nevil Nutri Feeds`, margin, doc.internal.pageSize.height - 10);

    doc.save(`${path}-Session-Details-Report.pdf`);
  }

  function generatePasturePDF(data) {
    const doc = new jspdf();
    const tableRows = [];
    const headers = [
      'Area',
      'Fertilizer Used',
      'Feeding Capacity',
      'Assigned Employee',
      'Type of Plants Planted',
    ];

    data.forEach((item, index) => {
      const rowData = [
        item.area,
        item.fertilizerUsed,
        item.feedingCapacity,
        item.assignedEmployee,
        item.typeOfPlantsPlanted,
      ];
      tableRows.push(rowData);
    });

    const date = new Date().toLocaleDateString('en-US', {
      day: 'numeric',
      month: 'short',
      year: 'numeric',
    });

    const margin = 14;
    const logoWidth = 30;
    const logoHeight = 20;
    const maxWidth = 290;
    const textLines = doc.splitTextToSize(
      `report related to pasture details`,
      maxWidth
    );
    const textParagraph = textLines.join('\n');

    doc.addImage(
      companyLogo,
      'PNG',
      doc.internal.pageSize.width - margin - logoWidth,
      margin,
      logoWidth,
      logoHeight
    );

    doc.setFontSize(10).setFont('helvetica').text('Nevil Nutri Feeds', margin, margin + 10);
    doc.text(' no:241 ,Radawana', margin, margin + 15);
    doc.text('Gampaha', margin, margin + 20);
    doc.text('Srilanka', margin, margin + 25);

    doc.setFontSize(10).text(`Date: ${date}`, margin, margin + 35);

    doc.setFontSize(20).setTextColor(56, 119, 91).setFont('helvetica', 'bold').text('Pasture Details Report', margin, 70);

    doc.setFontSize(10).setFont('helvetica', 'normal').setTextColor(0, 0, 0).text(
      textParagraph,
      margin,
      80,
      { maxWidth: maxWidth }
    );

    doc.autoTable(headers, tableRows, {
      styles: { fontSize: 10 },
      startY: 100,
      headerStyles: { fillColor: [31, 41, 55] },
    });

    doc.setFontSize(10).setTextColor(200, 200, 200).text(`Report generated by Grazing management system- Nevil Nutri Feeds`, margin, doc.internal.pageSize.height - 10);

    doc.save(`${path}-Pasture-Details-Report.pdf`);
  }

  function generateEffluentPDF(data) {
    setIsLoading(true);
    const doc = new jspdf();
    const tableRows = [];
    const headers = [
      'Date',
      'Grazing Area',
      'Amount of Waste Collected (kg)',
      'Type of Waste',
    ];

    data.forEach((item, index) => {
      const rowData = [
        new Date(item.date).toLocaleDateString(),
        item.grazingArea,
        item.wasteCollected,
        item.wasteType,
      ];
      tableRows.push(rowData);
    });

    const date = new Date().toLocaleDateString('en-US', {
      day: 'numeric',
      month: 'short',
      year: 'numeric',
    });

    const margin = 14;
    const logoWidth = 30;
    const logoHeight = 20;
    const maxWidth = 290;
    const textLines = doc.splitTextToSize(
      `report related to effluent data`,
      maxWidth
    );
    const textParagraph = textLines.join('\n');

    doc.addImage(
      companyLogo,
      'PNG',
      doc.internal.pageSize.width - margin - logoWidth,
      margin,
      logoWidth,
      logoHeight
    );

    doc.setFontSize(10).setFont('helvetica').text('Nevil Nutri Feeds', margin, margin + 10);
    doc.text(' no:241 ,Radawana', margin, margin + 15);
    doc.text('Gampaha', margin, margin + 20);
    doc.text('Srilanka', margin, margin + 25);

    doc.setFontSize(10).text(`Date: ${date}`, margin, margin + 35);

    doc.setFontSize(20).setTextColor(56, 119, 91).setFont('helvetica', 'bold').text('Effluent Details Report', margin, 70);

    doc.setFontSize(10).setFont('helvetica', 'normal').setTextColor(0, 0, 0).text(
      textParagraph,
      margin,
      80,
      { maxWidth: maxWidth }
    );

    doc.autoTable(headers, tableRows, {
      styles: { fontSize: 10 },
      startY: 100,
      headerStyles: { fillColor: [31, 41, 55] },
    });

    doc.setFontSize(10).setTextColor(200, 200, 200).text(`Report generated by Grazing management system- Nevil Nutri Feeds`, margin, doc.internal.pageSize.height - 10);

    doc.save(`${path}-Effluent-Details-Report.pdf`);
    setIsLoading(false);
  }

  return (
    <div>
      <GrazingSideBar sx={{ position: 'fixed', left: 0, top: 0, height: '100vh' }} />
      <Box className="dashboard-content">
        <Box className="welcome-header">
            <Name/>
            <GrazingDate/>
        </Box>
              
        <Typography
          sx={{
            fontFamily: 'Poppins',
            marginTop: '20px'
          }}
        > You can download the detailed reports for analysis from here.</Typography>
              
      </Box>
      <div style={{ marginTop:'70px',display: 'flex', justifyContent: 'center', gap:'70px',alignItems: 'center', flexDirection: 'column' }}>
        
         <div>
          <IconButton
            onClick={() => generateSessionPDF(sessionDataList)}
            variant="contained"
            className="bg-gray-800 text-center hover:bg-gray-600 text-white font-bold py-2 px-4 rounded cursor-pointer"
            sx={{
              fontFamily: 'Poppins'
            }}
          >
            <DownloadIcon />
            Session Detail Report
          </IconButton>
          </div>
          <div >
          <IconButton
            onClick={() => generatePasturePDF(pastureDataList)}
            variant="contained"
            className="bg-gray-800 text-center hover:bg-gray-600 text-white font-bold py-2 px-4 rounded cursor-pointer"
            sx={{
              fontFamily: 'Poppins'
            }}
          >
            <DownloadIcon/>
            Pasture Detail Report
          </IconButton>
          </div>
          <div >
          <IconButton
            onClick={() => generateEffluentPDF(effluentDataList)}
            variant="contained"
            className="bg-gray-800 text-center hover:bg-gray-600 text-white font-bold py-2 px-4 rounded cursor-pointer"
            sx={{
              fontFamily: 'Poppins'
            }}
          >
            {isLoading ? <CircularProgress size={24} /> : <DownloadIcon />}
            Effluent Detail Report
          </IconButton>
          </div>
        
        {isLoading && <CircularProgress />}
      </div>
    </div>
  );
};

export default Report;
